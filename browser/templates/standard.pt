<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" 
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
  xmlns:metal="http://xml.zope.org/namespaces/metal"
  xmlns:tal="http://xml.zope.org/namespaces/tal"
  metal:use-macro="context/@@groupserver_layout/page">
  <head>
    
  	<title metal:fill-slot="title">
      <span tal:replace="context/title | nothing">
        Standard GroupServer Template for Static Content Objects
      </span>:
      <span tal:replace="python:view.siteInfo.get_name()"/>
    </title>
    
    <tal:block metal:fill-slot="metadata">
      <tal:block 
        tal:condition="python:hasattr(context, 'metadata.xml')"
        tal:replace="structure python:getattr(context, 'metadata.xml')()">
        
        <meta name="title" content="Standard Content Template"/>
        <meta name="author" content="Michael JasonSmith" />
        <meta name="description" 
          content="This template is used to render static content" />
        <meta name="date" content="2006-09-27"/>
      </tal:block>
      <link rel="home" 
        tal:attributes="title python:'%s Homepage' % view.siteInfo.get_name();
        href python:view.siteInfo.get_url()"/>
      <link rel="help" 
        tal:attributes="title python:'%s Help' % view.siteInfo.get_name();
        href python:'%s/help' % view.siteInfo.get_url()"/>
    </tal:block>
    <!-- 
      - This template martials the content from Zope, placing the 
      - data in various slots. The resulting object is then passed
      - to the skin (gs_template), which adds all the navigation fluff.
      -
      - There are five slots that are filled by this template:
      -   1. The title of the page, aquired from the title of the 
      -      context-object (which is normally a folder),
      -   2. The meatadata, acquired from an optional "metadata.xml" 
      -      object in the context,
      -   3. The Javascript, acquired from an optional "javascript.xml"
      -      object in the context,
      -   4. The CSS-style, acquired from an optional "style.xml" object
      -      in the context, and
      -   5. The content of the page, acquired from "content_en.xml".
      - (At some stage the name of the content-object has to be altered so
      - we can grab the content according the user's preferred langage.)
      -
      - It is assumed that the XML documents understand the "method='html'"
      - argument. The objects can be of any XML format: XHTML1, XHTML2, or
      - Joshbook. However, for the most part only "content.xml" will be in
      - a format other than XHTML1. (The optional metadata may also be in
      - XHTM2, because it has a metadata format that makes sense, unlike 
      - XHTML1.) 
      -->
    
    <tal:block metal:fill-slot="javascript">
      <!-- Standard GroupServer JavaScript: XForms popup help -->
      <script type="text/javascript" 
        src="/Presentation/Tofu/XForms/js/xforms.js">&#160;</script>
    <!-- Grab any javascript that is defined in our context -->
      <span
        tal:condition="python:hasattr(context.aq_explicit, 'javascript.xml') or hasattr(context.aq_explicit, 'javascript')"
        tal:replace="structure python:getattr(context.aq_explicit, 'javascript.xml', getattr(context.aq_explicit, 'javascript'))(method='html')"/>
    </tal:block>
    
    <tal:block metal:fill-slot="style">
      <style tal:condition="python:hasattr(context, 'style.xml')"
        tal:replace="structure python:getattr(context, 'style.xml')(method='html')"/>
    </tal:block>
  </head>
  
  <body>
    <!-- The messages can go in odd places, so define them seperately from
      - the content. In addition, they can be generated by something other
      - than the "process_form" method of the view. -->
    <div metal:fill-slot="messages"
      tal:define="result view/process_form;
      isError python:result and result.has_key('error') and result['error'];"
      tal:condition="python:result and result.has_key('message')"
      tal:attributes="class python:(isError and 'message-error') or 'message-result'"
      tal:content="structure result/message"/>

    <!-- The body of the document. Most of the body is created from 
      - content_en object in our context, but we also add the One True
      - Form, which is needed for XForms
    -->
    <tal:block metal:fill-slot="body">
      <form method="post" action="."
        enctype="application/x-www-form-urlencoded"
        onkeypress="javascript:return keypressEventHandler(this, event)"
        tal:attributes="action python:view.request.URL">
      
        <div class="xforms_model">
          <!-- The page-specific models -->
          <input type="hidden" name="__submit__" value=""/>
          <div tal:condition="python:hasattr(context.aq_explicit, 'models')"
            tal:replace="structure python:getattr(context, 'models')(method='html')"/>
        </div>
        
        <div id="content"
          tal:replace="structure python:getattr(context, 'content_en')(method='html', siteName=view.siteInfo.get_name())">
          This should never be seen.
        </div>
        
      </form><!-- The One True XFrom-->
    </tal:block>
  </body>
</html>
